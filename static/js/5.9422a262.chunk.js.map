{"version":3,"sources":["../node_modules/react-bootstrap/esm/FormControl.js","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroup.js","Components/Filter/filter.js","../node_modules/react-bootstrap/esm/FormContext.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","../node_modules/warning/warning.js","Components/contact-selectors.js","../node_modules/react-bootstrap/esm/Feedback.js","../node_modules/react-bootstrap/esm/FormCheckInput.js"],"names":["FormControl","React","ref","classes","bsPrefix","type","size","htmlSize","id","className","isValid","isInvalid","plaintext","readOnly","as","Component","props","controlId","useContext","FormContext","useBootstrapPrefix","_jsx","classNames","displayName","Object","assign","Feedback","context","InputGroupText","createWithBsPrefix","InputGroup","hasValidation","contextValue","useMemo","InputGroupContext","Provider","value","children","Text","Radio","FormCheckInput","Checkbox","connect","dispatch","useDispatch","filter","useSelector","getFilter","style","marginTop","name","onChange","e","setFilter","currentTarget","placeholder","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","prefix","defaultProps","BsComponent","Tag","resolvedPrefix","warning","module","exports","getContacts","state","contacts","items","getMutableContactId","mutableContactId","getIsModalOpen","isModalOpen","getVisibleContacts","createSelector","normalizedContact","toLowerCase","contact","includes","propTypes","PropTypes","tooltip","bool","elementType"],"mappings":"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","file":"static/js/5.9422a262.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport warning from 'warning';\nimport Feedback from './Feedback';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormControl = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  type,\n  size,\n  htmlSize,\n  id,\n  className,\n  isValid = false,\n  isInvalid = false,\n  plaintext,\n  readOnly,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'input',\n  ...props\n}, ref) => {\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');\n  let classes;\n\n  if (plaintext) {\n    classes = {\n      [`${bsPrefix}-plaintext`]: true\n    };\n  } else {\n    classes = {\n      [bsPrefix]: true,\n      [`${bsPrefix}-${size}`]: size\n    };\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    type: type,\n    size: htmlSize,\n    ref: ref,\n    readOnly: readOnly,\n    id: id || controlId,\n    className: classNames(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === 'color' && `${bsPrefix}-color`)\n  });\n});\nFormControl.displayName = 'FormControl';\nexport default Object.assign(FormControl, {\n  Feedback\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\n\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\n\n/**\n *\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group'); // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});","import { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { setFilter } from '../../Redux/contacts/contact-actions';\r\nimport { getFilter } from '../contact-selectors';\r\nimport {InputGroup,FormControl} from 'react-bootstrap'\r\n\r\nfunction Filter() {\r\n    const dispatch = useDispatch();\r\n    const filter = useSelector(getFilter);\r\n    return (\r\n        <InputGroup className=\"mb-3\" style={{marginTop: 15}}>\r\n            <InputGroup.Text id=\"basic-addon1\">Фильтр</InputGroup.Text>\r\n            <FormControl\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                value={filter}\r\n                onChange={(e) => dispatch(setFilter(e.currentTarget.value))}\r\n                placeholder=\"Username\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                />\r\n        </InputGroup>\r\n    );\r\n};\r\n\r\nexport default connect()(Filter);\r\n","import * as React from 'react'; // TODO\n\nconst FormContext = /*#__PURE__*/React.createContext({});\nexport default FormContext;","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n","import { createSelector } from \"reselect\";\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getTotal = (state) => state.contacts.total;\r\nconst getMutableContactId = (state) => state.contacts.mutableContactId;\r\nconst getIsModalOpen = (state) => state.contacts.isModalOpen\r\n\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getFilter, getContacts],\r\n    (filter, contacts) => {\r\n        const normalizedContact = filter.toLowerCase();\r\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedContact));\r\n    }\r\n);\r\n\r\nexport {\r\n    getContacts,\r\n    getFilter,\r\n    getTotal,\r\n    getVisibleContacts,\r\n    getMutableContactId,\r\n    getIsModalOpen\r\n};","import classNames from 'classnames';\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * Specify whether the feedback is for valid or invalid fields\n   *\n   * @type {('valid'|'invalid')}\n   */\n  type: PropTypes.string,\n\n  /** Display feedback as a tooltip. */\n  tooltip: PropTypes.bool,\n  as: PropTypes.elementType\n};\nconst Feedback = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  as: Component = 'div',\n  className,\n  type = 'valid',\n  tooltip = false,\n  ...props\n}, ref) => /*#__PURE__*/_jsx(Component, { ...props,\n  ref: ref,\n  className: classNames(className, `${type}-${tooltip ? 'tooltip' : 'feedback'}`)\n}));\nFeedback.displayName = 'Feedback';\nFeedback.propTypes = propTypes;\nexport default Feedback;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormCheckInput = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  className,\n  type = 'checkbox',\n  isValid = false,\n  isInvalid = false,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'input',\n  ...props\n}, ref) => {\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-input');\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ref: ref,\n    type: type,\n    id: id || controlId,\n    className: classNames(className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid')\n  });\n});\nFormCheckInput.displayName = 'FormCheckInput';\nexport default FormCheckInput;"],"sourceRoot":""}