{"version":3,"sources":["Components/Navigation/Navigation.module.css","Redux/User/user-selectors.js","Redux/contacts/contact-actions.js","Redux/contacts/contacts-operations.js","Components/UserMenu/userMenu.module.css","Components/Container/Container.module.css","Redux/contacts/contact-slice.js","Redux/User/user-slice.js","Redux/store.js","Components/UserMenu/LogedInData.js","Components/UserMenu/LogedOutNav.js","Components/UserMenu/UserMenu.js","Components/Navigation/Navigation.js","Components/Container/Container.js","Components/PrivateRoute.js","Components/PublickRoute.js","App.js","index.js","Redux/User/user-operations.js"],"names":["module","exports","getIsLogedIn","state","user","isLogedIn","getUserName","name","getIsRefreshing","isRefreshing","getIsPasswordCorrect","isPasswordCorrect","getIsUserAlradyRegister","isUserAlradyRegister","setFilter","createAction","openModal","closeModal","axios","defaults","baseURL","fetchContacts","createAsyncThunk","a","get","data","postContact","contactData","post","deleteContact","id","delete","correctContact","number","body","patch","contactsSlice","createSlice","initialState","items","filter","isModalOpen","mutableContactId","extraReducers","fulfilled","action","payload","push","item","logOut","userSlice","email","token","registration","rejected","logedIn","getCurrentUserData","pending","contactsPersistConfig","key","storage","whitelist","store","configureStore","reducer","contacts","persistReducer","userReduser","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","connect","useSelector","dispatch","useDispatch","className","s","userMenuContainer","Button","userMenuBtn","type","onClick","navContainer","to","navLink","activeClassName","activeNavLink","navigation","exact","Container","children","routProps","restrickted","routeProps","shouldRedirect","HomeView","lazy","AddContactForm","Filter","ContactList","Login","Registration","useEffect","fallback","path","ReactDOM","render","StrictMode","loading","document","getElementById","headers","common","Authorization","credantials","_","getState","persistedToken"],"mappings":"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","file":"static/js/main.4223ae3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navLink\":\"Navigation_navLink__3YLG5\",\"activeNavLink\":\"Navigation_activeNavLink__3Out5\",\"navigation\":\"Navigation_navigation__TXKId\",\"navContainer\":\"Navigation_navContainer__1DsIx\"};","const getIsLogedIn = state => state.user.isLogedIn\r\nconst getUserName = state => state.user.user.name\r\nconst getIsRefreshing = state => state.user.isRefreshing\r\nconst getIsPasswordCorrect = state => state.user.isPasswordCorrect\r\nconst getIsUserAlradyRegister = state => state.user.isUserAlradyRegister\r\n\r\nexport {\r\n    getIsLogedIn,\r\n    getUserName,\r\n    getIsRefreshing,\r\n    getIsPasswordCorrect,\r\n    getIsUserAlradyRegister\r\n}","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst setFilter = createAction('contacts/setFilter');\r\nconst openModal = createAction('contacts/openModal');\r\nconst closeModal = createAction('contacts/closeModal');\r\n\r\nexport {\r\n    setFilter,\r\n    openModal,\r\n    closeModal\r\n};","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com/'\r\n\r\nconst fetchContacts = createAsyncThunk('contacts/fetchContacts',\r\n    async () => {\r\n        try {\r\n            const { data } = await axios.get('/contacts');\r\n            return data\r\n        } catch (error) {\r\n          \r\n        }\r\n    }\r\n);\r\nconst postContact = createAsyncThunk('contacts/postContact',\r\n    async (contactData) => {\r\n        try {\r\n            const { data } = await axios.post('/contacts', contactData)\r\n            return data\r\n        } catch (error) {\r\n           \r\n        }\r\n    }\r\n);\r\nconst deleteContact = createAsyncThunk('contacts/deleteContact',\r\n    async (id) => {\r\n        try {\r\n            await axios.delete(`/contacts/${id}`)\r\n            return id\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n);\r\nconst correctContact = createAsyncThunk('contacts/correctContact',\r\n    async ({id, name, number}) => {\r\n        try {\r\n            const body = {\r\n                name,\r\n                number\r\n            }\r\n            await axios.patch(`/contacts/${id}`, body)\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n)\r\n\r\nexport { fetchContacts, postContact, deleteContact, correctContact };\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userMenuContainer\":\"userMenu_userMenuContainer__3zZLC\",\"userMenuBtn\":\"userMenu_userMenuBtn__3xK8S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__1A6NW\"};","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { fetchContacts, postContact, deleteContact } from './contacts-operations';\r\nimport { setFilter, closeModal, openModal } from './contact-actions';\r\nimport { logOut } from '../User/user-operations';\r\n\r\n\r\nconst initialState = {\r\n    items: [],\r\n    filter: '',\r\n    isModalOpen: false,\r\n    mutableContactId: null\r\n}\r\n\r\nconst contactsSlice = createSlice({\r\n    name: 'contacts',\r\n    initialState,\r\n    extraReducers: {\r\n        [fetchContacts.fulfilled](state, action) {\r\n            state.items = action.payload;\r\n        },\r\n        [setFilter](state, action) {\r\n            state.filter = action.payload\r\n        },\r\n        [postContact.fulfilled](state, action) {\r\n            state.items.push(action.payload)\r\n        },\r\n        [deleteContact.fulfilled](state, action) {\r\n            state.items = state.items.filter(item => item.id !== action.payload)\r\n        },\r\n        [openModal](state, action) {\r\n            state.isModalOpen = true;\r\n            state.mutableContactId = action.payload\r\n        },\r\n        [closeModal](state) {\r\n            state.isModalOpen = false\r\n        },\r\n        [logOut.fulfilled](state) {\r\n            state.items= [];\r\n            state.filter= '';\r\n        }\r\n    }\r\n})\r\n\r\nexport default contactsSlice.reducer","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { registration, logedIn, logOut, getCurrentUserData } from './user-operations'\r\n\r\n\r\nconst initialState = {\r\n    user: { name: '', email: '' },\r\n    token: null,\r\n    isLogedIn: false,\r\n    isRefreshing: false,\r\n    isPasswordCorrect: true,\r\n    isUserAlradyRegister: false\r\n}\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    extraReducers: {\r\n        [registration.fulfilled](state, action) {\r\n            state.user = action.payload.user;\r\n            state.token = action.payload.token;\r\n            state.isLogedIn = true;\r\n            state.isUserAlradyRegister = false\r\n        },\r\n        [registration.rejected](state) {\r\n            state.isUserAlradyRegister = true\r\n        },\r\n        [logedIn.fulfilled](state, action) {\r\n            state.user = action.payload.user;\r\n            state.token = action.payload.token;\r\n            state.isLogedIn = true;\r\n            state.isPasswordCorrect = true\r\n        },\r\n        [logedIn.rejected](state) {\r\n            state.isPasswordCorrect = false\r\n        },\r\n        [logOut.fulfilled](state) {\r\n            state.user = { name: '', email: '' };\r\n            state.token = null;\r\n            state.isLogedIn = false;\r\n        },\r\n        [getCurrentUserData.fulfilled](state, action) {\r\n            state.user.name = action.payload.name;\r\n            state.user.email = action.payload.email;\r\n            state.isLogedIn = action.payload.isLogedIn;\r\n            state.isRefreshing = false\r\n        },\r\n        [getCurrentUserData.rejected](state) {\r\n            state.isRefreshing = false\r\n        },\r\n        [getCurrentUserData.pending](state) {\r\n            state.isRefreshing = true\r\n        }\r\n    }\r\n})\r\n\r\nexport default userSlice.reducer\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsSlice from \"./contacts/contact-slice\";\r\nimport userReduser from './User/user-slice';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n  \r\nconst contactsPersistConfig = {\r\n  key: 'user',\r\n  storage,\r\n  whitelist: 'token',\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsSlice,\r\n    user: persistReducer(contactsPersistConfig, userReduser)\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n  devTools: process.env.NODE_ENV === 'development'\r\n});\r\nconst persistor = persistStore(store);\r\n\r\nexport {persistor, store}","import { useDispatch, useSelector, connect } from \"react-redux\";\r\nimport { getUserName } from '../../Redux/User/user-selectors';\r\nimport { logOut } from '../../Redux/User/user-operations';\r\nimport { Button } from 'react-bootstrap';\r\nimport s from './userMenu.module.css';\r\n\r\nconst LogedInData = () => {\r\n    const name = useSelector(getUserName);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className={s.userMenuContainer}>\r\n            <p>Привет: {name}</p>\r\n            <Button className={s.userMenuBtn} type='button' onClick={() => dispatch(logOut())}>Выйти</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(LogedInData);","import { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from '../Navigation/Navigation.module.css';\r\n\r\n\r\nconst LogedOutNav = () => {\r\n\r\n    return (\r\n        <div className={s.navContainer}>\r\n            <NavLink to=\"/login\" className={s.navLink} activeClassName={s.activeNavLink}>Логин</NavLink>\r\n            <NavLink to=\"/register\" className={s.navLink} activeClassName={s.activeNavLink}>Регистрация</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect()(LogedOutNav);","import { connect, useSelector } from 'react-redux';\r\nimport LogedInData from './LogedInData';\r\nimport LogedOutNav from './LogedOutNav';\r\nimport { getIsLogedIn } from '../../Redux/User/user-selectors';\r\n\r\n\r\n\r\nconst UserMenu = () => {\r\n    const isLogedIn = useSelector(getIsLogedIn);\r\n\r\n    return (<>{isLogedIn ? <LogedInData /> : <LogedOutNav />}</>);\r\n};\r\n\r\nexport default connect()(UserMenu);","import { useSelector, connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './Navigation.module.css';\r\nimport { getIsLogedIn, getIsRefreshing } from '../../Redux/User/user-selectors';\r\nimport UserMenu from '../UserMenu/UserMenu';\r\n\r\nconst Navigation = () => {\r\n    const isLogedIn = useSelector(getIsLogedIn);\r\n    const isRefreshing = useSelector(getIsRefreshing);\r\n\r\n    return (\r\n        <>\r\n            <nav className={s.navigation}>\r\n                <div>\r\n                    <NavLink to=\"/\" exact className={s.navLink} activeClassName={s.activeNavLink}>Главная</NavLink>\r\n                    {isLogedIn && <NavLink to=\"/contacts\" className={s.navLink} activeClassName={s.activeNavLink}>Контакты</NavLink>}\r\n                </div>\r\n                {!isRefreshing && <UserMenu />}\r\n            </nav>\r\n            <hr />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default connect()(Navigation);","import s from './Container.module.css';\r\n\r\nconst Container = ({ children }) => (\r\n    <div className={s.Container}>{children}</div>\r\n);\r\n\r\nexport default Container;","import { connect, useSelector } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\nimport { getIsLogedIn } from '../Redux/User/user-selectors';\r\n\r\n\r\nconst PrivateRoute = ({ children, ...routProps }) => {\r\n    const isLogedIn = useSelector(getIsLogedIn)\r\n\r\n    return (<Route {...routProps}>{isLogedIn ? children : <Redirect to={'/login'}></Redirect>}</Route>)\r\n\r\n};\r\n\r\nexport default connect()(PrivateRoute)","import { connect, useSelector } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\nimport { getIsLogedIn } from '../Redux/User/user-selectors';\r\n\r\nconst PublickRoute = ({ children, restrickted = false, ...routeProps }) => {\r\n\r\n    const isLogedIn = useSelector(getIsLogedIn);\r\n    const shouldRedirect = isLogedIn && restrickted\r\n\r\n    return (<Route {...routeProps} >{shouldRedirect ? <Redirect to={'/contacts'}></Redirect> : children}</Route>)\r\n};\r\n\r\nexport default connect()(PublickRoute)","import { Switch } from 'react-router-dom'\nimport { connect, useDispatch } from 'react-redux';\nimport { Suspense, useEffect, lazy } from 'react';\nimport { getCurrentUserData } from './Redux/User/user-operations'\nimport './App.css';\nimport Navigation from './Components/Navigation/Navigation'\nimport Container from './Components/Container/Container'\nimport PrivateRoute from './Components/PrivateRoute'\nimport PublickRoute from './Components/PublickRoute'\n\nconst HomeView = lazy(() => import('./Components/HomeView/HomeView'))\nconst AddContactForm = lazy(() => import('./Components/Form/Form'))\nconst Filter = lazy(() => import('./Components/Filter/filter'))\nconst ContactList = lazy(() => import('./Components/Contacts/ContactList'))\nconst Login = lazy(() => import('./Components/Login/Login'))\nconst Registration = lazy(() => import('./Components/Registration/Registration'))\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() =>{\n    dispatch(getCurrentUserData());\n}, [dispatch]);\n\n  return (\n    <Container>\n      <Navigation />\n      <Switch>\n        <Suspense fallback={'Загрузка...'}>\n          <PublickRoute path='/' exact>\n            <HomeView />\n          </PublickRoute>\n          <PrivateRoute path='/contacts'>\n            <AddContactForm />\n            <Filter />\n            <ContactList />\n          </PrivateRoute>\n          <PublickRoute restrickted path={'/login'}>\n            <Login />\n          </PublickRoute>\n          <PublickRoute restrickted path='/register'>\n            <Registration />\n          </PublickRoute>\n        </Suspense>\n      </Switch>\n    </Container>\n  );\n};\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { persistor, store } from './Redux/store'\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom'\nimport 'modern-normalize/modern-normalize.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <BrowserRouter>\n                    <App />\n                </BrowserRouter>\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>\n        \n    , document.getElementById('root'));\n\n\n","import axios from \"axios\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com/'\r\nconst token = {\r\n    set(token) {\r\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`\r\n    },\r\n    unset() {\r\n        axios.defaults.headers.common.Authorization = ''\r\n    }\r\n};\r\n\r\nconst registration = createAsyncThunk('users/registration', async (credantials) => {\r\n    const { data } = await axios.post('/users/signup', credantials);\r\n    token.set(data.token);\r\n    return data\r\n});\r\n\r\nconst logedIn = createAsyncThunk('users/logedIn', async (credantials) => {\r\n    const { data } = await axios.post('/users/login', credantials);\r\n    token.set(data.token);\r\n    return data;\r\n});\r\n\r\nconst logOut = createAsyncThunk('users/logOut', async () => {\r\n    try {\r\n        await axios.post('/users/logout');\r\n        token.unset();\r\n    } catch (error) {\r\n        return error\r\n    }\r\n});\r\nconst getCurrentUserData = createAsyncThunk('user/getCurrentUserData', async (_, { getState }) => {\r\n    const persistedToken = getState().user.token\r\n    if (persistedToken === null) {\r\n        return ({\r\n            name: '',\r\n            email: '',\r\n            isLogedIn: false\r\n        })\r\n    }\r\n    token.set(persistedToken)\r\n    try {\r\n        const { data } = await axios.get('/users/current')\r\n        return ({\r\n            name: data.name,\r\n            email: data.email,\r\n            isLogedIn: true\r\n        })\r\n    } catch (error) {\r\n        return error\r\n    }\r\n});\r\n\r\n\r\n\r\nexport {\r\n    registration,\r\n    logedIn,\r\n    logOut,\r\n    getCurrentUserData\r\n};"],"sourceRoot":""}