{"version":3,"sources":["Components/Modal/CorrectionModal.module.css","Components/Contacts/contacts.module.css","Components/Modal/CorrectionModal.js","Components/Contacts/Contact.js","Components/Contacts/ContactList.js","Components/contact-selectors.js"],"names":["module","exports","connect","useState","name","setName","number","setPhoneNumber","dispatch","useDispatch","mutableContactId","useSelector","getMutableContactId","useEffect","window","addEventListener","handleKeyDown","e","code","removeEventListener","closeModal","handleInputChange","type","currentTarget","value","alert","className","s","Overlay","onClick","target","Modal","Dialog","Header","Title","Body","Form","onSubmit","preventDefault","newContact","id","correctContact","fetchContacts","Group","Label","Control","onChange","pattern","title","required","Button","visibleContacts","getVisibleContacts","getCurrentUserData","onDeleteBtnClick","deleteContact","onPatchbtnClick","openModal","map","ListGroup","Item","contactItem","isModalOpen","getIsModalOpen","getContacts","state","contacts","items","getFilter","filter","createSelector","normalizedContact","toLowerCase","contact","includes"],"mappings":"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","file":"static/js/6.ebbcc3ba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"CorrectionModal_Overlay__2UnfD\",\"Modal\":\"CorrectionModal_Modal__1lQCp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"contacts_contactItem__2Wcjw\"};","import { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch, connect } from \"react-redux\";\r\nimport { correctContact, fetchContacts } from '../../Redux/contacts/contacts-operations';\r\nimport { closeModal } from '../../Redux/contacts/contact-actions';\r\nimport { getMutableContactId } from '../contact-selectors';\r\nimport s from './CorrectionModal.module.css';\r\nimport { Form, Button, Modal } from \"react-bootstrap\";\r\n\r\nfunction CorrectionModal () {\r\n    const [name, setName] = useState('');\r\n    const [number, setPhoneNumber] = useState('');\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const mutableContactId = useSelector(getMutableContactId);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n    });\r\n\r\n    const handleKeyDown = (e) => {\r\n        if (e.code === 'Escape') {\r\n            window.removeEventListener('keydown', handleKeyDown)\r\n            dispatch(closeModal());\r\n        };\r\n    };\r\n\r\n    const handleBackdropClick = (e) => {\r\n        if (e.target === e.currentTarget) {\r\n            window.removeEventListener('keydown', handleKeyDown)\r\n            dispatch(closeModal());\r\n        };\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const type = e.currentTarget.name;\r\n        const value = e.currentTarget.value;\r\n        switch (type) {\r\n            case 'name':\r\n                setName(value)\r\n                break;\r\n            case 'number':\r\n                setPhoneNumber(value)\r\n                break;\r\n            default: alert('invalid type')\r\n        };\r\n    };\r\n\r\n    const onPatchFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newContact = {\r\n            id: mutableContactId,\r\n            name,\r\n            number\r\n        }\r\n        dispatch(correctContact(newContact));\r\n        dispatch(closeModal());\r\n        dispatch(fetchContacts());\r\n    }\r\n\r\n    return (\r\n        <div className={s.Overlay} onClick={handleBackdropClick}>\r\n            <Modal.Dialog className={s.Modal}>\r\n                <Modal.Header>\r\n                    <Modal.Title>Изменение контакта</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    <Form onSubmit={onPatchFormSubmit}>\r\n                        <Form.Group className=\"mb-3\" >\r\n                            <Form.Label >Имя контакта</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={name}\r\n                                onChange={handleInputChange}\r\n                                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                                required />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label >Номер контакта</Form.Label>\r\n                            <Form.Control\r\n                                type=\"tel\"\r\n                                name=\"number\"\r\n                                value={number}\r\n                                onChange={handleInputChange}\r\n                                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                                required />\r\n                        </Form.Group>\r\n                        <Button type=\"submit\">Изменить конткакт</Button>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal.Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect()(CorrectionModal)","import { useEffect } from 'react';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { fetchContacts, deleteContact } from '../../Redux/contacts/contacts-operations';\r\nimport { getCurrentUserData } from '../../Redux/User/user-operations';\r\nimport { getVisibleContacts } from '../contact-selectors';\r\nimport { openModal } from '../../Redux/contacts/contact-actions';\r\nimport { ListGroup, Button } from 'react-bootstrap';\r\nimport s from './contacts.module.css';\r\n\r\nfunction Contact() {\r\n    const visibleContacts = useSelector(getVisibleContacts);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getCurrentUserData());\r\n        dispatch(fetchContacts());\r\n    }, [dispatch]);\r\n\r\n    const onDeleteBtnClick = (e) => {\r\n        dispatch(deleteContact(e.currentTarget.id));\r\n    };\r\n    const onPatchbtnClick = (e) => {\r\n        dispatch(openModal(e.currentTarget.id));\r\n    };\r\n\r\n    return (\r\n        visibleContacts.map(({ name, number, id }) =>\r\n            <ListGroup.Item className={s.contactItem} key={id}>{name}: {number}\r\n                <Button type='button' id={id} onClick={onPatchbtnClick}>Изменить</Button>\r\n                <Button type='button' id={id} onClick={onDeleteBtnClick}>Удалить</Button>\r\n            </ListGroup.Item>\r\n        )\r\n    )\r\n};\r\n\r\n\r\nexport default connect()(Contact)\r\n","import { useSelector, connect } from \"react-redux\";\r\nimport { getIsModalOpen } from '../contact-selectors';\r\nimport CorrectionModal from '../Modal/CorrectionModal';\r\nimport Contact from \"./Contact\";\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nfunction ContactList() {\r\n    const isModalOpen = useSelector(getIsModalOpen)\r\n\r\n    return (\r\n        <ListGroup>\r\n            <h2>Список контактов</h2>\r\n            <Contact />\r\n            {isModalOpen && <CorrectionModal />}\r\n        </ListGroup>\r\n    );\r\n};\r\n\r\nexport default connect()(ContactList) ;\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getTotal = (state) => state.contacts.total;\r\nconst getMutableContactId = (state) => state.contacts.mutableContactId;\r\nconst getIsModalOpen = (state) => state.contacts.isModalOpen\r\n\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getFilter, getContacts],\r\n    (filter, contacts) => {\r\n        const normalizedContact = filter.toLowerCase();\r\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedContact));\r\n    }\r\n);\r\n\r\nexport {\r\n    getContacts,\r\n    getFilter,\r\n    getTotal,\r\n    getVisibleContacts,\r\n    getMutableContactId,\r\n    getIsModalOpen\r\n};"],"sourceRoot":""}